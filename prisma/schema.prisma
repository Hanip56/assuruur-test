// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPERADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  password      String?
  email         String?
  role          UserRole  @default(ADMIN)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  Article       Article[]
  Comment       Comment[]
}

model Article {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  author     User             @relation(fields: [userId], references: [id])
  title      String           @unique
  slug       String?
  content    String
  image      String
  categoryId String           @db.ObjectId
  category   Category         @relation(fields: [categoryId], references: [id])
  tags       TagsOnArticles[]
  Comment    Comment[]
  isSplit    Boolean?         @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String?
  description String?
  Article     Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  Articles  TagsOnArticles[]
  name      String           @unique
  slug      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TagsOnArticles {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  tagId     String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lembaga {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String
  profile   String
  visi      String
  moreInfo  String?
  image     String?
  isSplit   Boolean?   @default(false)
  pimpinan  Pimpinan[]
  misi      Misi[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Pimpinan {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  title     String
  image     String
  lembagaId String   @db.ObjectId
  Lembaga   Lembaga  @relation(fields: [lembagaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Misi {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  lembagaId String   @db.ObjectId
  Lembaga   Lembaga  @relation(fields: [lembagaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FasilitasType {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  slug      String
  Fasilitas Fasilitas[]
}

model Fasilitas {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String
  description     String
  image           String
  width           Int
  height          Int
  fasilitasTypeId String        @db.ObjectId
  type            FasilitasType @relation(fields: [fasilitasTypeId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Foto {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  description String
  width       Int
  height      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  articleId String    @db.ObjectId
  article   Article   @relation(fields: [articleId], references: [id])
  parentId  String?   @db.ObjectId
  parent    Comment?  @relation("CommentToOwn", references: [id], fields: [parentId], onDelete: NoAction, onUpdate: NoAction)
  childrens Comment[] @relation("CommentToOwn")
  userId    String?   @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id])
  image     String?
  username  String?
  body      String
  email     String?
  isApprove Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
