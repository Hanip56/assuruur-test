// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  password      String?
  email         String?
  role          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Article       Article[]
}

model Article {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  author     User             @relation(fields: [userId], references: [id])
  title      String           @unique
  slug       String?
  content    String
  image      String
  categoryId String           @db.ObjectId
  category   Category         @relation(fields: [categoryId], references: [id])
  tags       TagsOnArticles[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String?
  description String?
  Article     Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  Articles  TagsOnArticles[]
  name      String           @unique
  slug      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model TagsOnArticles {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  tagId     String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
